steps:
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: ['config', 'set', 'compute/zone', '${_COMPUTE_ZONE}']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: ['container', 'clusters', 'get-credentials', '${_CLUSTER_NAME}']
    env:
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
  # Build the Docker image for the Flask backend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/backend:latest', './backend']
  
  # Push the backend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/backend:latest']
  
  # Build the Docker image for the Nginx frontend
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/frontend:latest', './frontend']
  
  # Push the frontend image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/frontend:latest']
  
  # Apply the Kubernetes configuration files for the backend deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'manifest/backend-deployment.yaml']
  
  # Apply the Kubernetes configuration files for the backend service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'manifest/backend-service.yaml']

  # Apply the Kubernetes configuration files for the frontend deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'manifest/frontend-deployment.yaml']
  
  # Apply the Kubernetes configuration files for the frontend service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'manifest/frontend-service.yaml']

images:
  - 'gcr.io/$PROJECT_ID/backend:latest'
  - 'gcr.io/$PROJECT_ID/frontend:latest'

substitutions:
  _COMPUTE_ZONE: 'us-central1-a'
  _CLUSTER_NAME: 'ica-cluster'
